from aiogram import Router, F, Bot
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from aiogram.exceptions import TelegramBadRequest

from app.keyboards import donate_keyboard, stats_keyboard
from app.db_utils import load_all_users as db_load_all_users
from app.db_utils import load_achievements as db_load_achievements
from app.text_utils import get_rose_word_form, get_peonies_word_form
from app.game_mechanics import process_item_collection

from config import RULES, CHANNEL, ALL_ACHIEVEMENTS_LIST, PAGE_SIZE
from utils import logger

import random

router = Router()

hot_rose = ['—Ä–æ–∑–∞','—Ä–æ–∑—ã','—Ä–æ–∑']
hot_stats = ['—Å—Ç–∞—Ç—ã','—Å—Ç–∞—Ç—Å','—Å—Ç–∞—Ç']
hot_achie = ['–∞—á–∏–≤–∫–∏','–∞—á–∏','–¥–æ—Å—Ç—è–≥–∏']
hot_peonies = ['–ø–∏–æ–Ω','–ø–∏–æ–Ω—ã','–ø–∏–æ–Ω–∞']

@router.message(CommandStart())
async def start(message: Message):
    user_first_name = message.from_user.first_name if message.from_user else "–ì–æ—Å—Ç—å"
    await message.reply(
        f'–ü—Ä–∏–≤–µ—Ç {user_first_name}! üåπ\n\n'
        '–≠—Ç–æ –ø–µ—Ä–≤—ã–π –ø–æ–ª—É-–∑–∞–∫–æ–Ω—á–µ–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –æ—Ç @regwid1337 —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å –¢–ì –±–æ—Ç–æ–º –∏... –¶–≤–µ—Ç–∞–º–∏.\n–î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø—Ä–æ–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—ã /help –∏–ª–∏ /rules'
    )

@router.message(Command("help"))
async def help(message: Message):
    await message.reply(
        '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n'
        'üü¶ /start ‚Äì –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –±–æ—Ç–∞.\n'
        'üü¶ /help ‚Äì –°–ø—Ä–∞–≤–∫–∞.\n'
        'üü¶ /rose ‚Äì –§–∞—Ä–º —Ä–æ–∑.\n'
        'üü¶ /peonies ‚Äì –§–∞—Ä–º –ø–∏–æ–Ω–æ–≤.\n'
        'üü¶ /hotwords ‚Äì –°–ø–∏—Å–æ–∫ —Ö–æ—Ç-–≤–æ—Ä–¥–æ–≤ –±–æ—Ç–∞.\n'
        'üü¶ /donate ‚Äì –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞.\n'
        'üü¶ /stats ‚Äì –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (—Å –ª–∏—Å—Ç–∞–º–∏).\n'
        'üü¶ /fstats ‚Äì –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –≤ –õ–°).\n'
        'üü¶ /achie ‚Äì –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è.\n'
        'üü¶ /rules ‚Äì –ü—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.\n'
        'üü¶ /helpersdev ‚Äì –ê–≤—Ç–æ—Ä—ã –±–æ—Ç–∞.\n'
        'üü¶ /regchan ‚Äì –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–∞–Ω–∞–ª—É –Ω–æ–≤–æ—Å—Ç–µ–π.\n'
        'üü¶ /seasons ‚Äì –ï–∂–µ–º–µ—Å–µ—á–Ω—ã–µ —Å–µ–∑–æ–Ω—ã.\n'
        'üõ† –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å "–≥–æ—Ä—è—á–∏–º–∏ —Å–ª–æ–≤–∞–º–∏" (—Ö–æ—Ç-–≤–æ—Ä–¥–æ–≤) –¥–∞–π –º–Ω–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.'
    )

@router.message(Command("hotwords"))
async def hotwords(message: Message):
    await message.reply(
        '–•–æ—Ç-–≤–æ—Ä–¥—ã –±–æ—Ç–∞:\n'
        f'{", ".join(hot_rose)} - –§–∞—Ä–º —Ä–æ–∑\n'
        f'{", ".join(hot_peonies)} - –§–∞—Ä–º –ø–∏–æ–Ω–æ–≤\n'
        f'{", ".join(hot_stats)} - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n'
        f'{", ".join(hot_achie)} - –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è\n'
    )

async def _check_admin_for_hotwords(message: Message) -> bool:
    try:
        bot_member = await message.bot.get_chat_member(message.chat.id, message.bot.id)
        if bot_member.status != "administrator":
            await message.reply("–î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ö–æ—Ç-–≤–æ—Ä–¥–∞–º–∏ –º–Ω–µ –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
            return False
        return True
    except Exception as e:
        logger.error(f"Error checking bot admin status in hotword: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return False

@router.message(
    F.text,
    lambda msg: not msg.text.startswith('/'),
    lambda msg: any(word in msg.text.lower().split() for word in hot_rose)
)
async def handle_hotwords_rose_wrapper(message: Message):
    if await _check_admin_for_hotwords(message):
        await process_item_collection(message, "rose", get_rose_word_form)

@router.message(
    F.text,
    lambda msg: not msg.text.startswith('/'),
    lambda msg: any(word in msg.text.lower().split() for word in hot_peonies)
)
async def handle_hotwords_peonies_wrapper(message: Message):
    if await _check_admin_for_hotwords(message):
        await process_item_collection(message, "peony", get_peonies_word_form)

@router.message(
    F.text,
    lambda msg: not msg.text.startswith('/'),
    lambda msg: any(word in msg.text.lower().split() for word in hot_stats)
)
async def handle_hot_stats(message: Message):
    await handle_stats_command(message, is_hotword=True)

@router.message(
    F.text,
    lambda msg: not msg.text.startswith('/'),
    lambda msg: any(word in msg.text.lower().split() for word in hot_achie)
)
async def handle_hot_achie(message: Message):
    await show_achievements(message)

@router.message(Command("donate"))
async def donate(message: Message):
    markup = donate_keyboard()
    await message.reply("–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∞–≤—Ç–æ—Ä–∞ –º–æ–∂–Ω–æ —Ç—É—Ç:", reply_markup=markup)
    
@router.message(Command("stats"))
async def handle_stats_command(message: Message, is_hotword: bool = False):
    editable_message_id = message.message_id if not is_hotword else None
    await show_page_stats(message.bot, message.chat.id, editable_message_id, page=0, reply_to_message_id=message.message_id if is_hotword else None)

async def show_page_stats(bot: Bot, chat_id: int, message_id_to_edit: int | None, page: int, reply_to_message_id: int | None = None):
    data = await db_load_all_users()
    if not data:
        text_no_data = '–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ —Å–æ–±–∏—Ä–∞–ª —Ü–≤–µ—Ç—ã.‚òπÔ∏è'
        if message_id_to_edit:
            try:
                await bot.edit_message_text(chat_id=chat_id, message_id=message_id_to_edit, text=text_no_data, reply_markup=None)
            except TelegramBadRequest:
                await bot.send_message(chat_id=chat_id, text=text_no_data, reply_to_message_id=reply_to_message_id)
        else:
            await bot.send_message(chat_id=chat_id, text=text_no_data, reply_to_message_id=reply_to_message_id)
        return

    stats = sorted(data, key=lambda x: (x.get('roses', 0) + x.get('peonies', 0)), reverse=True)
    
    total_pages = (len(stats) + PAGE_SIZE - 1) // PAGE_SIZE
    start_index = page * PAGE_SIZE
    end_index = start_index + PAGE_SIZE
    current_page_users = stats[start_index:end_index]

    if not current_page_users:
        await bot.send_message(chat_id=chat_id, text='–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.', reply_to_message_id=reply_to_message_id)
        return

    stats_message_text = "üåπüå∏ –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
    for i, user_data_doc in enumerate(current_page_users, start=start_index + 1):
        roses = user_data_doc.get('roses', 0)
        peonies = user_data_doc.get('peonies', 0)
        username_display = user_data_doc.get('username', 'Unknown')
        nickname_display = user_data_doc.get('nickname', 'User')
        stats_message_text += f"{i}. {username_display} ({nickname_display}): " \
                              f"{roses} {get_rose_word_form(roses)}, {peonies} {get_peonies_word_form(peonies)}\n"
    
    markup = stats_keyboard(page, total_pages)
    
    try:
        if message_id_to_edit:
            await bot.edit_message_text(chat_id=chat_id, message_id=message_id_to_edit, text=stats_message_text, reply_markup=markup)
        else:
            await bot.send_message(chat_id=chat_id, text=stats_message_text, reply_markup=markup, reply_to_message_id=reply_to_message_id)
    except TelegramBadRequest as e:
        logger.warning(f"Failed to edit stats message, sending new one. Error: {e}")
        await bot.send_message(chat_id=chat_id, text=stats_message_text, reply_markup=markup, reply_to_message_id=reply_to_message_id)
    except Exception as e:
        logger.error(f"Unexpected error in show_page_stats: {e}")
        await bot.send_message(chat_id=chat_id, text="–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.", reply_to_message_id=reply_to_message_id)


@router.callback_query(F.data.startswith("stats:"))
async def handle_stats_pagination(callback: CallbackQuery):
    if not callback.message:
        await callback.answer("–ù–µ –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å.")
        return
    try:
        page_str = callback.data.split(":")[1]
        page = int(page_str)
        await show_page_stats(callback.bot, callback.message.chat.id, callback.message.message_id, page=page)
    except (ValueError, IndexError) as e:
        logger.error(f"Invalid page number or format in callback data: {callback.data}. Error: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.")
    except Exception as e:
        logger.error(f"Error in handle_stats_pagination: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
    finally:
        await callback.answer()

@router.message(Command("fstats"))
async def show_full_statistics(message: Message):
    if message.chat.type != "private":
        await message.reply("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º!")
        return

    data = await db_load_all_users()
    if not data:
        await message.reply('–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ —Å–æ–±–∏—Ä–∞–ª —Ü–≤–µ—Ç—ã :(')
        return
    
    stats = sorted(data, key=lambda x: (x.get('roses', 0) + x.get('peonies', 0)), reverse=True)
    
    stats_message_text = "üåπüå∏ –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
    for i, user_data_doc in enumerate(stats, start=1):
        roses = user_data_doc.get('roses', 0)
        peonies = user_data_doc.get('peonies', 0)
        username_display = user_data_doc.get('username', 'Unknown')
        nickname_display = user_data_doc.get('nickname', 'User')
        stats_message_text += f"{i}. @{username_display} ({nickname_display}): " \
                              f"{roses} {get_rose_word_form(roses)}, {peonies} {get_peonies_word_form(peonies)}\n"
    
    MAX_MESSAGE_LENGTH = 4096
    if len(stats_message_text) > MAX_MESSAGE_LENGTH:
        for i in range(0, len(stats_message_text), MAX_MESSAGE_LENGTH):
            await message.reply(stats_message_text[i:i + MAX_MESSAGE_LENGTH])
    else:
        await message.reply(stats_message_text)

@router.message(Command("achie"))
async def show_achievements(message: Message):
    if not message.from_user:
        await message.reply("–ù–µ –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
        
    user_id = str(message.from_user.id)
    user_achievements = await db_load_achievements(user_id)
    
    if not user_achievements:
        await message.reply("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π.")
        return

    response_text = "–í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n\n"
    for achie_name in user_achievements:
        detail = next((d for d in ALL_ACHIEVEMENTS_LIST if d["name"] == achie_name), None)
        if detail:
            response_text += f"üåü *{detail['name']}*\nüìñ {detail['description']}\n\n"
        else:
            response_text += f"üåü *{achie_name}* (–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ)\n\n"
            
    try:
        await message.reply(response_text, parse_mode="Markdown")
    except TelegramBadRequest as e:
        logger.error(f"Error sending achievements with Markdown: {e}. Sending as plain text.")
        await message.reply(response_text)


@router.message(Command("rules"))
async def rules(message: Message):
    await message.reply(f'–ü—Ä–∞–≤–∏–ª–∞ –±–æ—Ç–∞ ‚¨áÔ∏è:\n{RULES}')

@router.message(Command("seasons"))
async def seasons(message: Message):
    await message.reply('–ï—â–µ –Ω–µ –±—ã–ª–æ —Å–µ–∑–æ–Ω–æ–≤!')

@router.message(Command("helpersdev"))
async def helpersdev(message: Message):
    await message.reply(
        'üíµ Boosty:\n'
        'xenonity - 43 —Ä—É–±\n'
        'Aizava - 30 —Ä—É–±\n'
        'üí∞ DonationAlerts:\n'
        'De4thlxrd - 26 —Ä—É–±\n'
        'üßë‚Äçüíª Helpdev:\n'
        'Eselty, MaDeInCCCP'
    )

@router.message(Command("regchan"))
async def regchan(message: Message):
    await message.reply(f'üåπ–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞:\n{CHANNEL}')